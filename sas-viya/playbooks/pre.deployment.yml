---
# For all hosts that need an opt drive mounted to get more space, they should be in the NeedMountOptDrive group and will mount it here
- hosts: 
    - NeedMountOptDrive
  become: true
  tasks:
    - import_role:
        name: mount_opt_disk
# now create all of the directories needed for a sas install
- hosts: sas-servers
  become: true
  tasks:
    - name: create viya installation subdir
      file:
        path: /opt/sas
        state: directory
- hosts: ProgrammingServicesServers
  become: true
  tasks:
    - name: create saswork subdir
      file:
        path: /sastmp/saswork
        state: directory
        mode: 0777
      
- hosts: CasControllerServers
  become: true
  tasks:
    - name: create saslib subdir
      file:
        path: /opt/sas/viya/config/data/cas
        state: directory
    - name: create cascache subdir
      file:
        path: /sastmp/cascache
        state: directory
        mode: 0777

      
# evaluate license and based on that, setup orchestration
- hosts: all
  become: yes
  become_user: root
  vars:
    LICENSE_FILE: "/exports/bastion/setup/license/license_file.zip"
    VIRK_CLONE_DIRECTORY: "/exports/bastion/setup/virk"
    ORCHESTRATION_DIRECTORY: "/exports/bastion/setup/orchestration"
    CODE_DIRECTORY: "/exports/bastion/setup/code"
  tasks:
    - import_role:
        name: read_sas_license_information
    - import_role:
        name: predeploy_sas_orchestration_virk
    - name: copy site defaults for openldap
      copy:
        src: "{{ CODE_DIRECTORY }}/openldap/sitedefault.yml"
        dest: "{{ ORCHESTRATION_DIRECTORY }}/sas_viya_playbook/roles/consul/files/sitedefault.yml"
        remote_src: yes
      delegate_to: localhost
      run_once: true
      when: "OLCUSERPW != ''"
    - include_role:
        name: _setup_sas_orchestration_inventory_config/3.3
      when: "SAS_LICENSE.viya_version == '3.3'"
    - include_role:
        name: _setup_sas_orchestration_inventory_config/3.4
      when: "SAS_LICENSE.viya_version == '3.4'"

- hosts: sas-services
  become: yes
  become_user: root
  vars:
    SSL_CA_CERT_FILENAME: "sas_certificate_ca.crt"
    SSL_CA_KEY_FILENAME: "sas_certificate_ca.key"
    SSL_CHILD_CERT_FILENAME: "localhost.crt"
    SSL_CHILD_KEY_FILENAME: "localhost.key"
    SSL_WORKING_FOLDER: "/exports/bastion/setup/ssl"
    SSL_CLIENT_CERT_TARGET_FOLDER: "/etc/pki/tls/certs"
    SSL_CLIENT_KEY_TARGET_FOLDER: "/etc/pki/tls/private"
    SSL_CLIENT_BASE64: "{{ SSL_WORKING_FOLDER }}/sas_certificate_all.crt.b64"
    ARM_CLIENT_FILE: "{{ SSL_WORKING_FOLDER }}/sas_certificate_all.crt.b64.txt"
  tasks:
  - name: Create local certificate authority and
    shell:
      cmd: |
        cat > "{{ SSL_WORKING_FOLDER }}/cert_config_file.cfg"<<-EOF
        dir					= .

        [req]
        default_bits = 2048
        prompt = no
        default_md = sha512
        req_extensions = req_ext
        distinguished_name = dn

        [ dn ]
        C=US
        O=Self-Signed CA signed Certificate
        OU=SASViya
        CN = globalViyaHttpdCert

        [ req_ext ]
        subjectAltName = @alt_names

        [ alt_names ]
        DNS.1 = localhost
        {% for host in groups['sas-services'] %}
        DNS.{{ loop.index0 * 4 + 2 }} = {{ hostvars[host].inventory_hostname }}
        DNS.{{ loop.index0 * 4 + 3 }} = {{ hostvars[host].ansible_host }}
        DNS.{{ loop.index0 * 4 + 4 }} = *.{{ hostvars[host].ansible_host }}
        DNS.{{ loop.index0 * 4 + 5 }} = *.{{ hostvars[host].inventory_hostname }}
        {% endfor %}

        IP.1 = 127.0.0.1
        IP.2 = 0:0:0:0:0:0:0:1
        {% for host in groups['sas-services'] %}
        IP.{{ loop.index0 + 3 }} = {{ hostvars[host].ansible_default_ipv4.address }}
        {% endfor %}
        EOF
        cat > "{{ SSL_WORKING_FOLDER }}/mintCert.sh"<<-EOF
        openssl req -x509 -newkey rsa:2048 -keyout "{{ SSL_WORKING_FOLDER }}/{{ SSL_CHILD_KEY_FILENAME }}" -out "{{ SSL_WORKING_FOLDER }}/{{ SSL_CHILD_CERT_FILENAME }}" -days 3650 -nodes -config "{{ SSL_WORKING_FOLDER }}/cert_config_file.cfg" -extensions req_ext
        EOF
        chmod +x "{{ SSL_WORKING_FOLDER }}/mintCert.sh"
        bash "{{ SSL_WORKING_FOLDER }}/mintCert.sh"
        # Converting the doc to base64 for web consumption
        cat "{{ SSL_WORKING_FOLDER }}/{{ SSL_CHILD_CERT_FILENAME }}" | base64 -w 0 > "{{ SSL_CLIENT_BASE64 }}"
    run_once: true
    delegate_to: localhost

  - name: make sure the security folders exist on the services
    shell:
      cmd: |-
        mkdir -p "{{ SSL_CLIENT_CERT_TARGET_FOLDER }}"
        mkdir -p "{{ SSL_CLIENT_KEY_TARGET_FOLDER }}"
  - name: copy child cert to all services
    copy:
      src: "{{ SSL_WORKING_FOLDER }}/{{ SSL_CHILD_CERT_FILENAME }}"
      dest: "{{ SSL_CLIENT_CERT_TARGET_FOLDER }}/{{SSL_CHILD_CERT_FILENAME}}"
      mode: 0644

  - name: copy child key to all services
    copy:
      src: "{{ SSL_WORKING_FOLDER }}/{{ SSL_CHILD_KEY_FILENAME }}"
      dest: "{{ SSL_CLIENT_KEY_TARGET_FOLDER }}/{{SSL_CHILD_KEY_FILENAME}}"
      mode: 0600

#  - name: copy CA cert to all services
#    copy:
#      src: "{{ SSL_WORKING_FOLDER }}/{{SSL_CA_CERT_FILENAME}}"
#      dest: "{{ SSL_CLIENT_CERT_TARGET_FOLDER }}/server-chain.crt"
#      mode: 0644

  - name: outputting the crt file with the data markers
    blockinfile:
      marker: "#DATA#"
      path: "{{ ARM_CLIENT_FILE }}"
      block: >-
        {{ lookup('file', SSL_CLIENT_BASE64 ) }}
      create: yes
    run_once: true
    delegate_to: localhost



